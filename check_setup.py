#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""
import os
import sys
import subprocess
import importlib.util

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    if version.major >= 3 and version.minor >= 9:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - —Ç—Ä–µ–±—É–µ—Ç—Å—è Python 3.9+")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'fastapi',
        'uvicorn', 
        'openai',
        'python-multipart',
        'pydantic',
        'python-dotenv',
        'requests',
        'numpy'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            spec = importlib.util.find_spec(package)
            if spec is None:
                missing_packages.append(package)
            else:
                print(f"  ‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("  üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install -r requirements.txt")
        return False
    else:
        print("  ‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª .env"""
    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env...")
    
    if os.path.exists('.env'):
        print("  ‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open('.env', 'r') as f:
            content = f.read()
            
        if 'OPENAI_API_KEY' in content:
            print("  ‚úÖ OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω –≤ .env")
            return True
        else:
            print("  ‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            print("  üí° –î–æ–±–∞–≤—å—Ç–µ: OPENAI_API_KEY=your_key_here")
            return False
    else:
        print("  ‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("  üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å OPENAI_API_KEY")
        return False

def check_frontend():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    print("\n‚öõÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    
    if os.path.exists('frontend/package.json'):
        print("  ‚úÖ package.json –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
        if os.path.exists('frontend/node_modules'):
            print("  ‚úÖ node_modules –Ω–∞–π–¥–µ–Ω")
            return True
        else:
            print("  ‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("  üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd frontend && npm install")
            return False
    else:
        print("  ‚ùå frontend/package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_railway_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Railway"""
    print("\nüöÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Railway...")
    
    files_to_check = ['railway.json', 'startup.py', 'requirements.txt']
    
    for file in files_to_check:
        if os.path.exists(file):
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway –≥–æ—Ç–æ–≤–∞")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ê–ª–µ—Å—è")
    print("=" * 50)
    
    checks = [
        ("–í–µ—Ä—Å–∏—è Python", check_python_version),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python", check_dependencies),
        ("–§–∞–π–ª .env", check_env_file),
        ("–§—Ä–æ–Ω—Ç–µ–Ω–¥", check_frontend),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway", check_railway_config),
    ]
    
    results = []
    
    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {check_name}: {e}")
            results.append((check_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for check_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–ê" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–ê"
        print(f"{check_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –∏ –¥–µ–ø–ª–æ—é")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("   python startup.py")
        print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   python run_tests.py")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
