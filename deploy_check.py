#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway
"""
import os
import sys
import subprocess
import requests
import json

def check_railway_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Railway"""
    print("üöÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Railway...")
    
    required_files = [
        'railway.json',
        'startup.py', 
        'requirements.txt',
        'backend/server.py'
    ]
    
    for file in required_files:
        if os.path.exists(file):
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ railway.json
    try:
        with open('railway.json', 'r') as f:
            config = json.load(f)
        
        if 'deploy' in config and 'startCommand' in config['deploy']:
            print(f"  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞: {config['deploy']['startCommand']}")
        else:
            print("  ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è railway.json")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è railway.json: {e}")
        return False
    
    return True

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç requirements.txt"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt...")
    
    try:
        with open('requirements.txt', 'r') as f:
            lines = f.readlines()
        
        required_packages = [
            'fastapi',
            'uvicorn',
            'openai',
            'python-multipart',
            'pydantic'
        ]
        
        installed_packages = [line.split('==')[0] for line in lines if '==' in line]
        
        for package in required_packages:
            if package in installed_packages:
                print(f"  ‚úÖ {package}")
            else:
                print(f"  ‚ùå {package} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ requirements.txt")
                return False
        
        print(f"  ‚úÖ –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {len(lines)}")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {e}")
        return False

def check_startup_script():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞"""
    print("\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ startup.py...")
    
    try:
        with open('startup.py', 'r') as f:
            content = f.read()
        
        required_elements = [
            'uvicorn.run',
            'backend.server:app',
            'host="0.0.0.0"',
            'port='
        ]
        
        for element in required_elements:
            if element in content:
                print(f"  ‚úÖ {element}")
            else:
                print(f"  ‚ùå {element} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è startup.py: {e}")
        return False

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ OPENAI_API_KEY –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ
    try:
        with open('backend/server.py', 'r') as f:
            content = f.read()
        
        if 'OPENAI_API_KEY' in content:
            print("  ‚úÖ OPENAI_API_KEY –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ")
        else:
            print("  ‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ")
            return False
        
        if 'os.environ.get("PORT"' in content:
            print("  ‚úÖ PORT –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        else:
            print("  ‚ùå PORT –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
        return False

def check_cors_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        with open('backend/server.py', 'r') as f:
            content = f.read()
        
        if 'allow_origins=["*"]' in content:
            print("  ‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        else:
            print("  ‚ùå CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return False
        
        if 'CORSMiddleware' in content:
            print("  ‚úÖ CORSMiddleware –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            print("  ‚ùå CORSMiddleware –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS: {e}")
        return False

def check_api_endpoints():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    print("\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    try:
        with open('backend/server.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_endpoints = [
            '"/health"',
            '"/api/capabilities"',
            '"/api/chat"',
            '"/api/transcribe"',
            '"/api/voice/realtime/session"'
        ]
        
        for endpoint in required_endpoints:
            if endpoint in content:
                print(f"  ‚úÖ {endpoint}")
            else:
                print(f"  ‚ùå {endpoint} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {e}")
        return False

def check_mobile_compatibility():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–±–∏–ª—å–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"""
    print("\nüì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    
    try:
        with open('frontend/src/App.js', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        mobile_features = [
            'onTouchStart',
            'onTouchEnd',
            'getUserMedia',
            'MediaRecorder'
        ]
        
        for feature in mobile_features:
            if feature in content:
                print(f"  ‚úÖ {feature}")
            else:
                print(f"  ‚ö†Ô∏è  {feature} –Ω–µ –Ω–∞–π–¥–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False

def check_error_handling():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    print("\nüõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        with open('backend/server.py', 'r') as f:
            content = f.read()
        
        error_handling = [
            'try:',
            'except Exception as e:',
            'HTTPException',
            'logger.error'
        ]
        
        for element in error_handling:
            if element in content:
                print(f"  ‚úÖ {element}")
            else:
                print(f"  ‚ö†Ô∏è  {element} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway")
    print("=" * 60)
    
    checks = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway", check_railway_config),
        ("Requirements.txt", check_requirements),
        ("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞", check_startup_script),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment_variables),
        ("CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_cors_config),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", check_api_endpoints),
        ("–ú–æ–±–∏–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", check_mobile_compatibility),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", check_error_handling),
    ]
    
    results = []
    
    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {check_name}: {e}")
            results.append((check_name, False))
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –ì–û–¢–û–í–ù–û–°–¢–ò")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for check_name, result in results:
        status = "‚úÖ –ì–û–¢–û–í–û" if result else "‚ùå –ù–ï –ì–û–¢–û–í–û"
        print(f"{check_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –ü–†–û–ï–ö–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ!")
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–µ–ø–ª–æ—é:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ OPENAI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Railway")
        print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ Railway")
        print("3. Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç Python –ø—Ä–æ–µ–∫—Ç")
        print("4. –î–µ–ø–ª–æ–π –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º URL")
        
        print("\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ Railway —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç PORT)")
        print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ–≥–∏–æ–Ω –¥–µ–ø–ª–æ—è - –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)")
        
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
