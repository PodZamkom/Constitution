// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è GitHub Pages
const BACKEND_URL = 'http://localhost:8001'; // Local backend API for testing
let sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
let voiceMode = false;
let voiceChat = null;
let voiceModeStatus = 'disconnected';
let capabilities = {};

// Voice Mode WebRTC Class
class RealtimeAudioChat {
    constructor() {
        this.peerConnection = null;
        this.dataChannel = null;
        this.audioElement = null;
        this.sessionToken = null;
        this.sessionModel = "gpt-4o-realtime-preview-2024-12-17";
        this.onStatusChange = null;
        this.onError = null;
    }

    async init() {
        try {
            console.log('Initializing Voice Mode for –ê–ª–µ—Å—è...');
            
            // –†–ï–ê–õ–¨–ù–´–ô API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
            const tokenResponse = await fetch(`${BACKEND_URL}/api/voice/realtime/session`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    voice: "shimmer", // Female voice for –ê–ª–µ—Å—è
                    model: "gpt-4o-realtime-preview-2024-12-17"
                })
            });
            
            if (!tokenResponse.ok) {
                throw new Error(`Session request failed: ${tokenResponse.status}`);
            }
            
            const data = await tokenResponse.json();
            if (!data.client_secret?.value) {
                throw new Error("Failed to get session token");
            }
            
            this.sessionToken = data.client_secret.value;
            this.sessionModel = (data.model) || this.sessionModel;

            console.log('Voice Mode session created successfully');

            // Create and set up WebRTC peer connection
            this.peerConnection = new RTCPeerConnection();
            this.setupAudioElement();
            await this.setupLocalAudio();
            this.setupDataChannel();

            // Create and send offer
            const offer = await this.peerConnection.createOffer();
            await this.peerConnection.setLocalDescription(offer);

            // Send offer to backend and get answer
            const response = await fetch(`${BACKEND_URL}/api/voice/realtime/negotiate`, {
                method: "POST",
                body: offer.sdp,
                headers: {
                    "Content-Type": "application/sdp",
                    "Authorization": `Bearer ${this.sessionToken}`,
                    "X-OpenAI-Model": this.sessionModel
                }
            });
            
            if (!response.ok) {
                throw new Error(`Negotiation failed: ${response.status}`);
            }

            const { sdp: answerSdp } = await response.json();
            const answer = {
                type: "answer",
                sdp: answerSdp
            };

            await this.peerConnection.setRemoteDescription(answer);
            console.log("WebRTC connection established for –ê–ª–µ—Å—è Voice Mode");
            
            if (this.onStatusChange) {
                this.onStatusChange('connected');
            }
            
        } catch (error) {
            console.error("Failed to initialize –ê–ª–µ—Å—è audio chat:", error);
            if (this.onError) {
                this.onError(error.message);
            }
            throw error;
        }
    }

    setupAudioElement() {
        if (!this.audioElement) {
            this.audioElement = document.createElement("audio");
            this.audioElement.autoplay = true;
            document.body.appendChild(this.audioElement);
        }

        this.peerConnection.ontrack = (event) => {
            this.audioElement.srcObject = event.streams[0];
        };
    }

    async setupLocalAudio() {
        const stream = await navigator.mediaDevices.getUserMedia({ 
            audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true
            }
        });
        
        stream.getTracks().forEach(track => {
            this.peerConnection.addTrack(track, stream);
        });
    }

    setupDataChannel() {
        this.dataChannel = this.peerConnection.createDataChannel("oai-events");
        this.dataChannel.onmessage = (event) => {
            console.log("Received event:", event.data);
        };
        
        this.dataChannel.onopen = () => {
            console.log("Data channel opened");
            if (this.onStatusChange) {
                this.onStatusChange('ready');
            }
        };
        
        this.dataChannel.onclose = () => {
            console.log("Data channel closed");
            if (this.onStatusChange) {
                this.onStatusChange('disconnected');
            }
        };
    }
    
    disconnect() {
        if (this.dataChannel) {
            this.dataChannel.close();
        }
        
        if (this.peerConnection) {
            this.peerConnection.close();
        }
        
        if (this.audioElement) {
            document.body.removeChild(this.audioElement);
            this.audioElement = null;
        }
        
        if (this.onStatusChange) {
            this.onStatusChange('disconnected');
        }
    }
}

function setMode(isVoiceMode) {
    voiceMode = isVoiceMode;
    const buttons = document.querySelectorAll('.mode-btn');
    buttons.forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    updateInterface();
}

function updateInterface() {
    const chatInput = document.querySelector('.chat-input');
    const voiceControls = document.querySelector('.voice-mode-controls');
    
    if (voiceMode) {
        chatInput.style.display = 'none';
        if (!voiceControls) {
            if (voiceModeStatus === 'ready' || voiceModeStatus === 'connected') {
                createVoiceActiveControls();
            } else {
                createVoiceControls();
            }
        }
    } else {
        chatInput.style.display = 'flex';
        if (voiceControls) {
            voiceControls.remove();
        }
        // Disconnect voice mode when switching to text
        if (voiceChat) {
            disconnectVoiceMode();
        }
    }
}

function createVoiceControls() {
    const chatContainer = document.querySelector('.chat-container');
    const voiceControls = document.createElement('div');
    voiceControls.className = 'voice-mode-controls';
    voiceControls.innerHTML = `
        <div class="voice-status">
            <p>–†–µ–∂–∏–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
            <div class="status-indicator disconnected">
                <span class="status-dot"></span>
                –°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω
            </div>
        </div>
        <button class="voice-connect-btn" onclick="connectVoiceMode()">
            –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É
        </button>
    `;
    chatContainer.appendChild(voiceControls);
}

function createVoiceActiveControls() {
    const chatContainer = document.querySelector('.chat-container');
    const voiceControls = document.createElement('div');
    voiceControls.className = 'voice-mode-controls';
    voiceControls.innerHTML = `
        <div class="voice-active">
            <div class="voice-indicator">
                üé§ <strong>–ì–æ–≤–æ—Ä–∏—Ç–µ!</strong> –Ø —Å–ª—É—à–∞—é...
            </div>
            <button class="voice-disconnect-btn" onclick="disconnectVoiceMode()">
                –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
            </button>
            <p class="voice-hint">
                üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–±–∏–≤–∞—Ç—å –º–µ–Ω—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
            </p>
        </div>
    `;
    chatContainer.appendChild(voiceControls);
}

async function sendMessage() {
    const input = document.getElementById('messageInput');
    const message = input.value.trim();
    if (!message) return;

    addMessage(message, 'user');
    input.value = '';

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingIndicator();

    try {
        // –†–ï–ê–õ–¨–ù–´–ô API –≤—ã–∑–æ–≤ –∫ ChatGPT
        const response = await fetch(`${BACKEND_URL}/api/chat`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: message,
                session_id: sessionId
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        hideLoadingIndicator();
        addMessage(data.response, 'assistant');
    } catch (error) {
        console.error('Error:', error);
        hideLoadingIndicator();
        addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.', 'assistant');
    }
}

function generateLocalResponse(message) {
    const messageLower = message.toLowerCase();
    
    // Greeting responses
    if (messageLower.includes('–ø—Ä–∏–≤–µ—Ç') || messageLower.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π') || messageLower.includes('–¥–æ–±—Ä—ã–π –¥–µ–Ω—å')) {
        return "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ—Å—è. –Ø –≤–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å —Ä–µ–¥–∞–∫—Ü–∏–∏ 2022 –≥–æ–¥–∞. –Ø –∑–Ω–∞—é –Ω–∞–∏–∑—É—Å—Ç—å –≤—Å—é –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é –∏ –ø–æ–º–æ–≥—É –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –Ω–µ–π. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?";
    }
    
    // Constitution-related responses
    if (messageLower.includes('–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è') || messageLower.includes('—Å—Ç–∞—Ç—å—è') || messageLower.includes('–ø—Ä–∞–≤–∞') || messageLower.includes('–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏')) {
        return `–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å! –í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: "${message}". 

–°–æ–≥–ª–∞—Å–Ω–æ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–ë —Ä–µ–¥–∞–∫—Ü–∏–∏ 2022 –≥–æ–¥–∞, –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–∞—à–µ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –≤–∫–ª—é—á–∞—é—Ç:
- –ù–∞—Ä–æ–¥–æ–≤–ª–∞—Å—Ç–∏–µ (—Å—Ç–∞—Ç—å—è 3)
- –í–µ—Ä—Ö–æ–≤–µ–Ω—Å—Ç–≤–æ –ø—Ä–∞–≤–∞ (—Å—Ç–∞—Ç—å—è 7) 
- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞—Å—Ç–µ–π (—Å—Ç–∞—Ç—å—è 6)
- –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å (—Å—Ç–∞—Ç—å—è 21)

–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç–∞—Ç—å—è, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä, –∏ —è –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.`;
    }
    
    // Rights and freedoms
    if (messageLower.includes('–ø—Ä–∞–≤–∞') || messageLower.includes('—Å–≤–æ–±–æ–¥—ã')) {
        return `–ü—Ä–∞–≤–∞ –∏ —Å–≤–æ–±–æ–¥—ã –≥—Ä–∞–∂–¥–∞–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ II –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ (—Å—Ç–∞—Ç—å–∏ 21-63).

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤–∫–ª—é—á–∞—é—Ç:
- –ü—Ä–∞–≤–æ –Ω–∞ –∂–∏–∑–Ω—å (—Å—Ç–∞—Ç—å—è 24)
- –ü—Ä–∞–≤–æ –Ω–∞ —Å–≤–æ–±–æ–¥—É –∏ –ª–∏—á–Ω—É—é –Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω–æ—Å—Ç—å (—Å—Ç–∞—Ç—å—è 25)
- –ü—Ä–∞–≤–æ –Ω–∞ –Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω–æ—Å—Ç—å –∂–∏–ª–∏—â–∞ (—Å—Ç–∞—Ç—å—è 28)
- –ü—Ä–∞–≤–æ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—Å—Ç–∞—Ç—å—è 49)
- –ü—Ä–∞–≤–æ –Ω–∞ —Ç—Ä—É–¥ (—Å—Ç–∞—Ç—å—è 41)

–°–ø—Ä–∞–≤–∫–∞: —ç—Ç–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è —Å—Ç–∞—Ç—å—è–º–∏ 21-63 –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å.`;
    }
    
    // State structure
    if (messageLower.includes('–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ') || messageLower.includes('–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç') || messageLower.includes('–ø–∞—Ä–ª–∞–º–µ–Ω—Ç')) {
        return `–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ III –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ (—Å—Ç–∞—Ç—å–∏ 79-116).

–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã –≤–ª–∞—Å—Ç–∏:
- –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å (—Å—Ç–∞—Ç—å–∏ 79-89)
- –ü–∞—Ä–ª–∞–º–µ–Ω—Ç - –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ (—Å—Ç–∞—Ç—å–∏ 90-100)
- –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ - –°–æ–≤–µ—Ç –ú–∏–Ω–∏—Å—Ç—Ä–æ–≤ (—Å—Ç–∞—Ç—å–∏ 106-116)
- –°—É–¥—ã (—Å—Ç–∞—Ç—å–∏ 109-116)

–°–ø—Ä–∞–≤–∫–∞: —ç—Ç–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è —Å—Ç–∞—Ç—å—è–º–∏ 79-116 –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å.`;
    }
    
    // General responses
    return `–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ—Å—è, –∏ —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å. –í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: "${message}". 

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ª—é–±—ã—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –Ω–∞—à–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞.

–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ:
- –ü—Ä–∞–≤–∞—Ö –∏ —Å–≤–æ–±–æ–¥–∞—Ö –≥—Ä–∞–∂–¥–∞–Ω
- –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—å—è—Ö –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏
- –ü—Ä–∏–Ω—Ü–∏–ø–∞—Ö –ø—Ä–∞–≤–æ–≤–æ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞`;
}

function addMessage(content, role) {
    const messagesContainer = document.getElementById('messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${role}`;
    
    const now = new Date();
    const timeString = now.toLocaleTimeString('ru-RU');
    
    messageDiv.innerHTML = `
        <div class="message-content">
            <span class="message-text">${content}</span>
            ${role === 'assistant' ? '<button class="tts-btn" onclick="playTTS(\'' + content.replace(/'/g, "\\'") + '\')" title="–û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç">üîä</button>' : ''}
        </div>
        <div class="message-time">${timeString}</div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function showLoadingIndicator() {
    const messagesContainer = document.getElementById('messages');
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'message assistant';
    loadingDiv.id = 'loading-indicator';
    loadingDiv.innerHTML = `
        <div class="message-content loading">
            <span>–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥—É–º–∞–µ—Ç...</span>
            <div class="loading-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    `;
    messagesContainer.appendChild(loadingDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function hideLoadingIndicator() {
    const loadingIndicator = document.getElementById('loading-indicator');
    if (loadingIndicator) {
        loadingIndicator.remove();
    }
}

function playTTS(text) {
    if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'ru-RU';
        window.speechSynthesis.speak(utterance);
    }
}

async function connectVoiceMode() {
    setVoiceModeStatus('connecting');
    
    try {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Voice Mode
        setTimeout(() => {
            setVoiceModeStatus('ready');
            alert('Voice Mode –ø–æ–¥–∫–ª—é—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Å –ê–ª–µ—Å–µ–π. (–î–µ–º–æ-—Ä–µ–∂–∏–º: –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ)');
        }, 2000);
        
    } catch (error) {
        console.error('Voice mode connection failed:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Voice Mode. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        setVoiceModeStatus('disconnected');
    }
}

function disconnectVoiceMode() {
    if (voiceChat) {
        voiceChat.disconnect();
        voiceChat = null;
    }
    setVoiceModeStatus('disconnected');
}

function setVoiceModeStatus(status) {
    voiceModeStatus = status;
    updateVoiceStatusDisplay();
    
    // Update interface if in voice mode
    if (voiceMode) {
        const voiceControls = document.querySelector('.voice-mode-controls');
        if (voiceControls) {
            voiceControls.remove();
        }
        
        if (status === 'ready' || status === 'connected') {
            createVoiceActiveControls();
        } else {
            createVoiceControls();
        }
    }
}

function updateVoiceStatusDisplay() {
    const statusIndicator = document.querySelector('.status-indicator');
    if (statusIndicator) {
        statusIndicator.className = `status-indicator ${voiceModeStatus}`;
        statusIndicator.innerHTML = `
            <span class="status-dot"></span>
            –°—Ç–∞—Ç—É—Å: ${getVoiceModeStatusText()}
        `;
    }
}

function getVoiceModeStatusText() {
    switch (voiceModeStatus) {
        case 'connecting': return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
        case 'connected': return '–ü–æ–¥–∫–ª—é—á–µ–Ω';
        case 'ready': return '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É';
        case 'disconnected': return '–û—Ç–∫–ª—é—á–µ–Ω';
        default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}

// Load capabilities on page load
async function loadCapabilities() {
    try {
        // –†–ï–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ API
        const response = await fetch(`${BACKEND_URL}/api/capabilities`);
        if (response.ok) {
            capabilities = await response.json();
            console.log('API capabilities:', capabilities);
        } else {
            // Fallback –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            capabilities = {
                whisper_available: false,
                voice_mode_available: true,
                llm_available: true
            };
            console.log('Using fallback capabilities:', capabilities);
        }
    } catch (error) {
        console.error('Failed to load capabilities:', error);
        // Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
        capabilities = {
            whisper_available: false,
            voice_mode_available: true,
            llm_available: true
        };
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    const messageInput = document.getElementById('messageInput');
    if (messageInput) {
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    }
    
    // Load capabilities on page load
    loadCapabilities();
});
