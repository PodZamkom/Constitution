#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
"""
import requests
import json
import time
import os
import tempfile
import wave
import numpy as np
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BACKEND_URL = "http://localhost:8000"
FRONTEND_URL = "http://localhost:3000"

def create_test_audio():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
    sample_rate = 16000
    duration = 2
    frequency = 440
    
    t = np.linspace(0, duration, int(sample_rate * duration), False)
    audio_data = np.sin(2 * np.pi * frequency * t)
    audio_data = (audio_data * 32767).astype(np.int16)
    
    wav_buffer = BytesIO()
    with wave.open(wav_buffer, 'wb') as wav_file:
        wav_file.setnchannels(1)
        wav_file.setsampwidth(2)
        wav_file.setframerate(sample_rate)
        wav_file.writeframes(audio_data.tobytes())
    
    wav_buffer.seek(0)
    return wav_buffer.getvalue()

def test_backend_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è –±—ç–∫–µ–Ω–¥–∞"""
    print("üîç –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è –±—ç–∫–µ–Ω–¥–∞...")
    try:
        response = requests.get(f"{BACKEND_URL}/health", timeout=10)
        if response.status_code == 200:
            print("  ‚úÖ –ë—ç–∫–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"  ‚ùå –ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            return False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É: {e}")
        return False

def test_openai_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI"""
    print("üîç –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º capabilities
        response = requests.get(f"{BACKEND_URL}/api/capabilities", timeout=10)
        if response.status_code != 200:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å capabilities")
            return False
        
        data = response.json()
        if not data.get('chat'):
            print("  ‚ùå –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç
        chat_response = requests.post(
            f"{BACKEND_URL}/api/chat",
            json={
                "message": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç.",
                "session_id": "test_integration"
            },
            timeout=30
        )
        
        if chat_response.status_code == 200:
            print("  ‚úÖ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"  ‚ùå –ß–∞—Ç –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {chat_response.status_code}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI: {e}")
        return False

def test_voice_transcription():
    """–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
    try:
        audio_data = create_test_audio()
        
        files = {'file': ('test.wav', audio_data, 'audio/wav')}
        response = requests.post(
            f"{BACKEND_URL}/api/transcribe",
            files=files,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"  ‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('transcription', '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç')}")
            return True
        else:
            print(f"  ‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥ {response.status_code}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        return False

def test_streaming_chat():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    print("üîç –¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —á–∞—Ç–∞...")
    try:
        response = requests.post(
            f"{BACKEND_URL}/api/chat/stream",
            json={
                "message": "–†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –ë–µ–ª–∞—Ä—É—Å–∏",
                "session_id": "test_stream"
            },
            stream=True,
            timeout=30
        )
        
        if response.status_code == 200:
            print("  ‚úÖ –ü–æ—Ç–æ–∫–æ–≤—ã–π —á–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            # –ß–∏—Ç–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤
            chunk_count = 0
            for line in response.iter_lines():
                if line and chunk_count < 2:
                    try:
                        data = json.loads(line.decode().replace('data: ', ''))
                        if 'content' in data:
                            print(f"    –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫: {data['content'][:50]}...")
                            chunk_count += 1
                    except:
                        pass
                if chunk_count >= 2:
                    break
            return True
        else:
            print(f"  ‚ùå –ü–æ—Ç–æ–∫–æ–≤—ã–π —á–∞—Ç –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —á–∞—Ç–∞: {e}")
        return False

def test_voice_session():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
    print("üîç –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...")
    try:
        response = requests.post(
            f"{BACKEND_URL}/api/voice/realtime/session",
            json={
                "voice": "shimmer",
                "model": "gpt-4o-realtime-preview-2024-12-17"
            },
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"  ‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {data['session_id'][:20]}...")
            return True
        else:
            print(f"  ‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤–µ—Ä–Ω—É–ª–æ –∫–æ–¥ {response.status_code}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return False

def test_cors_headers():
    """–¢–µ—Å—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    print("üîç –¢–µ—Å—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
    try:
        response = requests.options(
            f"{BACKEND_URL}/api/chat",
            headers={
                "Origin": "http://localhost:3000",
                "Access-Control-Request-Method": "POST"
            },
            timeout=10
        )
        
        cors_origin = response.headers.get("Access-Control-Allow-Origin")
        if cors_origin == "*":
            print("  ‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return True
        else:
            print(f"  ‚ùå CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {cors_origin}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ CORS —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_mobile_compatibility():
    """–¢–µ—Å—Ç –º–æ–±–∏–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    print("üîç –¢–µ—Å—Ç –º–æ–±–∏–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    try:
        mobile_headers = {
            "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15"
        }
        
        response = requests.get(
            f"{BACKEND_URL}/api/capabilities",
            headers=mobile_headers,
            timeout=10
        )
        
        if response.status_code == 200:
            print("  ‚úÖ –ú–æ–±–∏–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å OK")
            return True
        else:
            print(f"  ‚ùå –ú–æ–±–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_railway_readiness():
    """–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway"""
    print("üîç –¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ Railway...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        port = os.environ.get("PORT", "8000")
        print(f"  –ü–æ—Ä—Ç: {port}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        response = requests.get(f"{BACKEND_URL}/health", timeout=5)
        if response.status_code == 200:
            print("  ‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é")
            return True
        else:
            print("  ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Railway: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ê–ª–µ—Å—è")
    print("=" * 60)
    
    tests = [
        ("–ó–¥–æ—Ä–æ–≤—å–µ –±—ç–∫–µ–Ω–¥–∞", test_backend_health),
        ("OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_openai_integration),
        ("–ì–æ–ª–æ—Å–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", test_voice_transcription),
        ("–ü–æ—Ç–æ–∫–æ–≤—ã–π —á–∞—Ç", test_streaming_chat),
        ("–ì–æ–ª–æ—Å–æ–≤–∞—è —Å–µ—Å—Å–∏—è", test_voice_session),
        ("CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏", test_cors_headers),
        ("–ú–æ–±–∏–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", test_mobile_compatibility),
        ("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ Railway", test_railway_readiness),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ OPENAI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Railway")
        print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ Railway")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
