#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
"""
import requests
import json
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BACKEND_URL = "http://localhost:8000"

def test_mobile_voice_recording():
    """–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    print("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    test_cases = [
        {
            "name": "WebM Opus (Chrome Mobile)",
            "filename": "recording.webm",
            "mime_type": "audio/webm;codecs=opus",
            "content": b"fake_webm_opus_audio_data"
        },
        {
            "name": "WebM (Firefox Mobile)",
            "filename": "recording.webm", 
            "mime_type": "audio/webm",
            "content": b"fake_webm_audio_data"
        },
        {
            "name": "MP4 AAC (Safari Mobile)",
            "filename": "recording.m4a",
            "mime_type": "audio/mp4",
            "content": b"fake_mp4_aac_audio_data"
        }
    ]
    
    results = []
    
    for test_case in test_cases:
        print(f"  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {test_case['name']}...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME —Ç–∏–ø–æ–º
            files = {
                'file': (
                    test_case['filename'],
                    test_case['content'],
                    test_case['mime_type']
                )
            }
            
            response = requests.post(
                f"{BACKEND_URL}/api/transcribe",
                files=files,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"    ‚úÖ {test_case['name']} - —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                results.append(True)
            else:
                print(f"    ‚ùå {test_case['name']} - –æ—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                results.append(False)
                
        except Exception as e:
            print(f"    ‚ùå {test_case['name']} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            results.append(False)
    
    return all(results)

def test_cors_headers():
    """–¢–µ—Å—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º preflight –∑–∞–ø—Ä–æ—Å
        response = requests.options(
            f"{BACKEND_URL}/api/transcribe",
            headers={
                "Origin": "https://example.com",
                "Access-Control-Request-Method": "POST",
                "Access-Control-Request-Headers": "Content-Type"
            },
            timeout=10
        )
        
        cors_headers = {
            "Access-Control-Allow-Origin": response.headers.get("Access-Control-Allow-Origin"),
            "Access-Control-Allow-Methods": response.headers.get("Access-Control-Allow-Methods"),
            "Access-Control-Allow-Headers": response.headers.get("Access-Control-Allow-Headers"),
        }
        
        print(f"  CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏: {cors_headers}")
        
        if cors_headers["Access-Control-Allow-Origin"] == "*":
            print("  ‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return True
        else:
            print("  ‚ùå CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ CORS —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_mobile_user_agents():
    """–¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ User-Agent –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤"""
    print("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ User-Agent...")
    
    mobile_user_agents = [
        "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
        "Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36",
        "Mozilla/5.0 (Mobile; rv:68.0) Gecko/68.0 Firefox/68.0"
    ]
    
    results = []
    
    for ua in mobile_user_agents:
        print(f"  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {ua.split('(')[1].split(')')[0]}...")
        
        try:
            response = requests.get(
                f"{BACKEND_URL}/api/capabilities",
                headers={"User-Agent": ua},
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                results.append(True)
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
                results.append(False)
                
        except Exception as e:
            print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            results.append(False)
    
    return all(results)

def test_audio_permissions():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –∞—É–¥–∏–æ"""
    print("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –∞—É–¥–∏–æ...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É–¥–∏–æ
        response = requests.get(f"{BACKEND_URL}/api/capabilities", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if data.get('voice_mode_available') or data.get('chat'):
                print("  ‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
                return True
            else:
                print("  ‚ùå –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return False
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    print("üì± –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–æ–±–∏–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    print("=" * 60)
    
    tests = [
        ("CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏", test_cors_headers),
        ("–ú–æ–±–∏–ª—å–Ω—ã–µ User-Agent", test_mobile_user_agents),
        ("–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∞—É–¥–∏–æ", test_audio_permissions),
        ("–ú–æ–±–∏–ª—å–Ω–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å", test_mobile_voice_recording),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–ë–ò–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.")
        print("üì± –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
