#!/usr/bin/env python3
"""
Specific Review Request Tests for –ê–ª–µ—Å—è - Belarus Constitution AI Assistant
Tests the exact questions mentioned in the review request
"""

import asyncio
import aiohttp
import json
import uuid
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv('/app/frontend/.env')

# Get backend URL from environment variable
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'http://localhost:8001')
BASE_API_URL = f"{BACKEND_URL}/api"

print(f"Testing specific review request scenarios at: {BASE_API_URL}")

class SpecificReviewTester:
    def __init__(self):
        self.session = None
        self.test_session_id = str(uuid.uuid4())

    async def setup(self):
        """Initialize HTTP session"""
        self.session = aiohttp.ClientSession()

    async def cleanup(self):
        """Close HTTP session"""
        if self.session:
            await self.session.close()

    async def test_specific_identity_questions(self):
        """Test the exact identity questions from review request"""
        print("\nüß™ Testing Specific Identity Questions from Review Request...")
        
        specific_questions = [
            "–ö—Ç–æ —Ç—ã?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", 
            "–ö–∞–∫–∞—è —Ç–≤–æ—è —Ä–æ–ª—å?",
            "–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å?"
        ]
        
        for question in specific_questions:
            try:
                payload = {
                    "session_id": f"{self.test_session_id}_specific",
                    "message": question
                }
                
                async with self.session.post(f"{BASE_API_URL}/chat", json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        response_text = data.get('response', '')
                        
                        print(f"\nüìù Question: {question}")
                        print(f"üìã Response: {response_text}")
                        print("-" * 80)
                    else:
                        print(f"‚ùå '{question}' - HTTP {response.status}")
                        
            except Exception as e:
                print(f"‚ùå '{question}' - Error: {str(e)}")

    async def test_specific_constitution_questions(self):
        """Test the exact Constitution questions from review request"""
        print("\nüß™ Testing Specific Constitution Questions from Review Request...")
        
        constitution_questions = [
            "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –≥—Ä–∞–∂–¥–∞–Ω –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –ë–µ–ª–∞—Ä—É—Å–∏?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤–ª–∞—Å—Ç–∏ –ø–æ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏",
            "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –æ –ø—Ä–∞–≤–∞—Ö —á–µ–ª–æ–≤–µ–∫–∞?"
        ]
        
        for question in constitution_questions:
            try:
                payload = {
                    "session_id": f"{self.test_session_id}_constitution_specific",
                    "message": question
                }
                
                async with self.session.post(f"{BASE_API_URL}/chat", json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        response_text = data.get('response', '')
                        
                        print(f"\nüìù Question: {question}")
                        print(f"üìã Response: {response_text}")
                        
                        # Check for article references
                        import re
                        article_numbers = re.findall(r'—Å—Ç–∞—Ç—å[—è–µ–∏—é]\s*(\d+)', response_text.lower())
                        if article_numbers:
                            print(f"üìä Article references found: {article_numbers}")
                        else:
                            print("‚ö†Ô∏è No specific article numbers found")
                        print("-" * 80)
                    else:
                        print(f"‚ùå '{question}' - HTTP {response.status}")
                        
            except Exception as e:
                print(f"‚ùå '{question}' - Error: {str(e)}")

    async def test_specific_refusal_questions(self):
        """Test the exact non-Constitution questions from review request"""
        print("\nüß™ Testing Specific Non-Constitution Questions from Review Request...")
        
        refusal_questions = [
            "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –∑–∞–∫–æ–Ω–∞—Ö –†–æ—Å—Å–∏–∏",
            "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?"
        ]
        
        for question in refusal_questions:
            try:
                payload = {
                    "session_id": f"{self.test_session_id}_refusal_specific",
                    "message": question
                }
                
                async with self.session.post(f"{BASE_API_URL}/chat", json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        response_text = data.get('response', '')
                        
                        print(f"\nüìù Question: {question}")
                        print(f"üìã Response: {response_text}")
                        
                        # Check for proper refusal
                        expected_phrases = ["–∞–ª–µ—Å—è", "–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –±–µ–ª–∞—Ä—É—Å–∏", "–º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ"]
                        found_phrases = [phrase for phrase in expected_phrases if phrase in response_text.lower()]
                        print(f"üìä Refusal markers found: {found_phrases}")
                        print("-" * 80)
                    else:
                        print(f"‚ùå '{question}' - HTTP {response.status}")
                        
            except Exception as e:
                print(f"‚ùå '{question}' - Error: {str(e)}")

    async def test_voice_mode_session_detailed(self):
        """Test Voice Mode session creation with detailed logging"""
        print("\nüß™ Testing Voice Mode Session Creation (Detailed)...")
        
        try:
            # Test session creation
            async with self.session.post(f"{BASE_API_URL}/voice/realtime/session") as response:
                print(f"üìä Voice Mode Session Response Status: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    print(f"üìã Session Data Keys: {list(data.keys())}")
                    
                    # Check for instructions in response
                    if 'instructions' in data:
                        instructions = data['instructions']
                        print(f"üìù Instructions Length: {len(instructions)} characters")
                        print(f"üìã Instructions Preview: {instructions[:200]}...")
                        
                        # Check for –ê–ª–µ—Å—è-specific content
                        aleya_markers = ['–∞–ª–µ—Å—è', '–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∏ –±–µ–ª–∞—Ä—É—Å—å', '–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç']
                        found_markers = [marker for marker in aleya_markers if marker.lower() in instructions.lower()]
                        print(f"üìä –ê–ª–µ—Å—è markers in instructions: {found_markers}")
                    else:
                        print("‚ö†Ô∏è No instructions field in session response")
                    
                    # Check voice configuration
                    if 'voice' in data:
                        print(f"üé§ Voice configured: {data['voice']}")
                    
                    print("‚úÖ Voice Mode session creation successful")
                else:
                    error_text = await response.text()
                    print(f"‚ùå Voice Mode session failed: {error_text}")
                    
        except Exception as e:
            print(f"‚ùå Voice Mode session error: {str(e)}")

    async def run_specific_tests(self):
        """Run all specific review request tests"""
        print("üöÄ Starting Specific Review Request Tests for –ê–ª–µ—Å—è")
        print("=" * 80)
        
        await self.setup()
        
        try:
            await self.test_specific_identity_questions()
            await self.test_specific_constitution_questions()
            await self.test_specific_refusal_questions()
            await self.test_voice_mode_session_detailed()
            
        finally:
            await self.cleanup()

async def main():
    """Main test execution"""
    tester = SpecificReviewTester()
    await tester.run_specific_tests()

if __name__ == "__main__":
    asyncio.run(main())