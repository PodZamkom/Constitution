#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Voice Mode –¥–ª—è Belarus Constitution AI Assistant
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
"""

import requests
import json
import uuid

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
BACKEND_URL = "http://localhost:8002"
BASE_API_URL = f"{BACKEND_URL}/api"

def test_voice_session_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Voice Mode —Å–µ—Å—Å–∏–∏"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è Voice Mode —Å–µ—Å—Å–∏–∏...")
        
        payload = {
            "model": "gpt-4o-realtime-preview-latest",
            "voice": "verse",
            "instructions": "–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ 2022 –≥–æ–¥–∞."
        }
        
        response = requests.post(
            f"{BASE_API_URL}/voice/realtime/session", 
            json=payload, 
            timeout=30
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Voice Mode —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"üìã –ú–æ–¥–µ–ª—å: {data.get('model', 'N/A')}")
            print(f"üé§ –ì–æ–ª–æ—Å: {data.get('voice', 'N/A')}")
            print(f"üîó WebSocket URL: {data.get('websocket_url', 'N/A')[:50]}...")
            return True
        elif response.status_code == 403:
            data = response.json()
            error_detail = data.get('detail', '')
            if "—Ä–µ–≥–∏–æ–Ω" in error_detail.lower() or "region" in error_detail.lower():
                print("‚úÖ Voice Mode API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
                print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {error_detail}")
                return True
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ 403: {error_detail}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {response.status_code}")
            print(f"üìù –î–µ—Ç–∞–ª–∏: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_voice_session_with_region_error():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞"""
    try:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞...")
        
        payload = {
            "model": "gpt-4o-realtime-preview-latest",
            "voice": "verse"
        }
        
        response = requests.post(
            f"{BASE_API_URL}/voice/realtime/session", 
            json=payload, 
            timeout=30
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code in [403, 404, 502]:
            data = response.json()
            error_detail = data.get('detail', '')
            print(f"üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_detail}")
            
            if "—Ä–µ–≥–∏–æ–Ω" in error_detail.lower() or "region" in error_detail.lower():
                print("‚úÖ –û—à–∏–±–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            elif "endpoint" in error_detail.lower() or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in error_detail.lower():
                print("‚úÖ –û—à–∏–±–∫–∞ endpoint –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
                return False
        else:
            print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ (–Ω–µ—Ç –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞)")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_capabilities_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ capabilities"""
    try:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ capabilities...")
        
        response = requests.get(f"{BASE_API_URL}/capabilities", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Capabilities –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"üé§ Voice Mode –¥–æ—Å—Ç—É–ø–µ–Ω: {data.get('voice_mode_available', False)}")
            print(f"ü§ñ –ú–æ–¥–µ–ª—å –≥–æ–ª–æ—Å–∞: {data.get('voice_model', 'N/A')}")
            print(f"üéµ –ò–º—è –≥–æ–ª–æ—Å–∞: {data.get('voice_name', 'N/A')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è capabilities: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Voice Mode"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Voice Mode")
    print("=" * 50)
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º capabilities
    results.append(("Capabilities Endpoint", test_capabilities_endpoint()))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    results.append(("Voice Session Creation", test_voice_session_creation()))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    results.append(("Error Handling", test_voice_session_with_region_error()))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø VOICE MODE")
    print("=" * 50)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Voice Mode –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
    
    return passed == len(results)

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
