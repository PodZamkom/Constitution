#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã Voice Mode
"""

import asyncio
import websockets
import json
import os
from dotenv import load_dotenv

load_dotenv()

async def test_voice_mode():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –ø–æ—à–∞–≥–æ–≤–æ"""
    
    print("üé§ [VOICE DEBUG TEST] Starting voice mode debug test...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY not found in environment")
        return False
    print(f"‚úÖ OpenAI API key found: {api_key[:10]}...")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±—ç–∫–µ–Ω–¥–æ–º
    backend_url = "ws://localhost:8001/api/voice/realtime/ws"
    print(f"üîå Testing WebSocket connection to: {backend_url}")
    
    try:
        async with websockets.connect(backend_url) as websocket:
            print("‚úÖ WebSocket connection to backend established")
            
            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = {
                "type": "session.update",
                "session": {
                    "modalities": ["text", "audio"],
                    "instructions": "Test connection",
                    "voice": "shimmer"
                }
            }
            
            print("üì§ Sending test message to backend...")
            await websocket.send(json.dumps(test_message))
            print("‚úÖ Test message sent")
            
            # 4. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            print("‚è≥ Waiting for response...")
            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=10.0)
                print(f"üì• Received response: {response[:200]}...")
                print("‚úÖ Backend WebSocket is working")
            except asyncio.TimeoutError:
                print("‚ö†Ô∏è No response received within 10 seconds")
            
    except Exception as e:
        print(f"‚ùå WebSocket connection failed: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ OpenAI (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    print("\nüîç Testing direct OpenAI connection...")
    openai_url = "wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-12-17"
    headers = {"Authorization": f"Bearer {api_key}"}
    
    try:
        async with websockets.connect(openai_url, extra_headers=headers) as openai_ws:
            print("‚úÖ Direct OpenAI connection established")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            test_config = {
                "type": "session.update",
                "session": {
                    "modalities": ["text"],
                    "instructions": "Test connection to OpenAI"
                }
            }
            
            await openai_ws.send(json.dumps(test_config))
            print("‚úÖ Test configuration sent to OpenAI")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            try:
                response = await asyncio.wait_for(openai_ws.recv(), timeout=5.0)
                print(f"üì• OpenAI response: {response[:200]}...")
                print("‚úÖ OpenAI Realtime API is accessible")
            except asyncio.TimeoutError:
                print("‚ö†Ô∏è No response from OpenAI within 5 seconds")
                
    except Exception as e:
        print(f"‚ùå Direct OpenAI connection failed: {e}")
        print("üí° This might be due to regional restrictions or API issues")
    
    print("\nüé§ [VOICE DEBUG TEST] Test completed!")
    return True

if __name__ == "__main__":
    asyncio.run(test_voice_mode())
