#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
"""
import requests
import json
import os
import tempfile
import wave
import numpy as np
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BACKEND_URL = "http://localhost:8000"
TEST_AUDIO_DURATION = 3  # —Å–µ–∫—É–Ω–¥—ã

def create_test_audio():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º"""
    sample_rate = 16000
    duration = TEST_AUDIO_DURATION
    frequency = 440  # A4 note
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    t = np.linspace(0, duration, int(sample_rate * duration), False)
    audio_data = np.sin(2 * np.pi * frequency * t)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 16-bit PCM
    audio_data = (audio_data * 32767).astype(np.int16)
    
    # –°–æ–∑–¥–∞–µ–º WAV —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    wav_buffer = BytesIO()
    with wave.open(wav_buffer, 'wb') as wav_file:
        wav_file.setnchannels(1)  # –º–æ–Ω–æ
        wav_file.setsampwidth(2)  # 16-bit
        wav_file.setframerate(sample_rate)
        wav_file.writeframes(audio_data.tobytes())
    
    wav_buffer.seek(0)
    return wav_buffer.getvalue()

def test_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        response = requests.get(f"{BACKEND_URL}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False

def test_capabilities():
    """–¢–µ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        response = requests.get(f"{BACKEND_URL}/api/capabilities", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞: {data}")
            
            if not data.get('chat'):
                print("‚ùå –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
                
            if not data.get('voice_mode_available'):
                print("‚ö†Ô∏è  –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
            
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
        return False

def test_chat():
    """–¢–µ—Å—Ç —á–∞—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞...")
    try:
        response = requests.post(
            f"{BACKEND_URL}/api/chat",
            json={
                "message": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                "session_id": "test_session"
            },
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Ç–≤–µ—Ç: {data['response'][:100]}...")
            return True
        else:
            print(f"‚ùå –ß–∞—Ç –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        return False

def test_voice_session():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...")
    try:
        response = requests.post(
            f"{BACKEND_URL}/api/voice/realtime/session",
            json={
                "voice": "shimmer",
                "model": "gpt-4o-realtime-preview-2024-12-17"
            },
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {data['session_id']}")
            return True
        else:
            print(f"‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤–µ—Ä–Ω—É–ª–æ –∫–æ–¥ {response.status_code}: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {e}")
        return False

def test_transcription():
    """–¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
        audio_data = create_test_audio()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        files = {'file': ('test.wav', audio_data, 'audio/wav')}
        response = requests.post(
            f"{BACKEND_URL}/api/transcribe",
            files=files,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç: {data.get('transcription', '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç')}")
            return True
        else:
            print(f"‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥ {response.status_code}: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        return False

def test_streaming_chat():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —á–∞—Ç–∞...")
    try:
        response = requests.post(
            f"{BACKEND_URL}/api/chat/stream",
            json={
                "message": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –ë–µ–ª–∞—Ä—É—Å–∏",
                "session_id": "test_stream_session"
            },
            stream=True,
            timeout=30
        )
        
        if response.status_code == 200:
            print("‚úÖ –ü–æ—Ç–æ–∫–æ–≤—ã–π —á–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤
            chunk_count = 0
            for line in response.iter_lines():
                if line and chunk_count < 3:
                    print(f"   –ß–∞–Ω–∫: {line.decode()}")
                    chunk_count += 1
                if chunk_count >= 3:
                    break
            return True
        else:
            print(f"‚ùå –ü–æ—Ç–æ–∫–æ–≤—ã–π —á–∞—Ç –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —á–∞—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    print("=" * 50)
    
    tests = [
        ("–ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞", test_health),
        ("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞", test_capabilities),
        ("–ß–∞—Ç", test_chat),
        ("–ì–æ–ª–æ—Å–æ–≤–∞—è —Å–µ—Å—Å–∏—è", test_voice_session),
        ("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", test_transcription),
        ("–ü–æ—Ç–æ–∫–æ–≤—ã–π —á–∞—Ç", test_streaming_chat),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
